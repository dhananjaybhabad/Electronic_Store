package com.infosys.electronicstore.controllers;import com.infosys.electronicstore.dtos.ApiResponse;import com.infosys.electronicstore.dtos.PageableResponse;import com.infosys.electronicstore.dtos.ProductDto;import com.infosys.electronicstore.services.ProductServiceI;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import static org.springframework.http.HttpStatus.OK;@RestController@RequestMapping("/products")public class ProductController {    @Autowired    private ProductServiceI productServiceI;    @PostMapping    public ResponseEntity<ProductDto> createProduct(@RequestBody ProductDto productDto) {        ProductDto createdProduct = productServiceI.create(productDto);        return new ResponseEntity<>(createdProduct, HttpStatus.CREATED);    }    @PutMapping    public ResponseEntity<ProductDto> updateProduct(@PathVariable String productId, @RequestBody ProductDto productDto) {        ProductDto updatedProduct = productServiceI.update(productDto, productId);        return new ResponseEntity<>(updatedProduct, OK);    }    @DeleteMapping("/{productId}")    public ResponseEntity<ApiResponse> deleteProduct(@PathVariable String productId) {        productServiceI.delete(productId);        ApiResponse responseMsg = ApiResponse.builder().message("Product is deleted Successfully !!").status(OK).success(true).build();        return new ResponseEntity<>(responseMsg, OK);    }    @GetMapping("/{productId}")    public ResponseEntity<ProductDto> getProduct(@PathVariable String productId) {        ProductDto getProduct = productServiceI.get(productId);        return new ResponseEntity<>(getProduct, OK);    }    @GetMapping    public ResponseEntity<PageableResponse<ProductDto>> getAll(            @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,            @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,            @RequestParam(value = "sortBy", defaultValue = "title", required = false) String sortBy,            @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {        PageableResponse<ProductDto> pageableResponse = productServiceI.getAll(pageNumber, pageSize, sortBy, sortDir);        return new ResponseEntity<>(pageableResponse, OK);    }    @GetMapping("/live")    public ResponseEntity<PageableResponse<ProductDto>> getAllLive(                      @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,            @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,            @RequestParam(value = "sortBy", defaultValue = "title", required = false) String sortBy,            @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {        PageableResponse<ProductDto> pageableResponse = productServiceI.getAllLive(pageNumber, pageSize, sortBy, sortDir);        return new ResponseEntity<>(pageableResponse, OK);}@GetMapping("/search/{query}")    public ResponseEntity<PageableResponse<ProductDto>> searchProduct(            @PathVariable String query,            @RequestParam(value = "pageNumber", defaultValue = "0", required = false) int pageNumber,            @RequestParam(value = "pageSize", defaultValue = "10", required = false) int pageSize,            @RequestParam(value = "sortBy", defaultValue = "title", required = false) String sortBy,            @RequestParam(value = "sortDir", defaultValue = "asc", required = false) String sortDir) {        PageableResponse<ProductDto> pageableResponse = productServiceI.searchByTitle(query,pageNumber, pageSize, sortBy, sortDir);        return new ResponseEntity<>(pageableResponse, OK);    }}