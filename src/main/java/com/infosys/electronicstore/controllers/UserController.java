package com.infosys.electronicstore.controllers;import com.infosys.electronicstore.constant.AppConstant;import com.infosys.electronicstore.dtos.ApiResponse;import com.infosys.electronicstore.dtos.ImageResponse;import com.infosys.electronicstore.dtos.UserDto;import com.infosys.electronicstore.services.FileServiceI;import com.infosys.electronicstore.services.UserServiceI;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.util.StreamUtils;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletResponse;import javax.validation.Valid;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.util.List;import static org.springframework.http.MediaType.IMAGE_JPEG_VALUE;@Slf4j@RestController@RequestMapping("/users")public class UserController {    @Autowired    private UserServiceI userService;    @Autowired    private FileServiceI fileServiceI;    @Value("${user.profile.image.path}")    private String imageUploadPath;    @PostMapping("/create")    public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserDto userDto) {        log.info("Initiating save request for create user ");        UserDto user = this.userService.createUser(userDto);        log.info("Completed save request for create user ");        return new ResponseEntity<>(user, HttpStatus.CREATED);    }    //hello    @PutMapping("/{userId}")    public ResponseEntity<UserDto> updateUser(@Valid @RequestBody UserDto userDto, @PathVariable Long userId) {        log.info("Initiating request for update user ");        UserDto updatedUser = this.userService.updateUser(userDto, userId);        log.info("Completed request for update user " + userId);        return new ResponseEntity<>(updatedUser, HttpStatus.OK);    }    @DeleteMapping("/{userId}")    public ResponseEntity<ApiResponse> deleteUser(@PathVariable Long userId) {        log.info("Initiating request for delete user ");        this.userService.deleteUser(userId);        ApiResponse msg = ApiResponse.builder().message(AppConstant.DELETE_SUCCESS)                .success(true).status(HttpStatus.OK).build();        log.info("Completed request for delete user " + userId);        return new ResponseEntity<>(msg, HttpStatus.OK);    }    @GetMapping("/getById/{userId}")    public ResponseEntity<UserDto> getUserById(@PathVariable Long userId) {        log.info("Initiating request for get user by Id ");        UserDto userById = this.userService.getUserById(userId);        log.info("Completed request for get user by Id " + userId);        return new ResponseEntity<>(userById, HttpStatus.OK);    }    @GetMapping("/getAll")    public ResponseEntity<List<UserDto>> getAllUsers            (@RequestParam(value = "pageNumber", defaultValue = "0", required = false) int PageNumber,             @RequestParam(value = "pageSize", defaultValue = "10", required = false) int PageSize) {        log.info("Initiating request for get All users ");        List<UserDto> allUsers = this.userService.getAllUsers(PageNumber, PageSize);        log.info("Completed request for get All users ");        return new ResponseEntity<>(allUsers, HttpStatus.OK);    }    @GetMapping("/{email}")    public ResponseEntity<UserDto> getUserByEmail(@PathVariable String email) {        log.info("Initiating get request for UserByEmail ");        UserDto userByEmail = this.userService.getUserByEmail(email);        log.info("Completed get request for UserByEmail " + email);        return new ResponseEntity<>(userByEmail, HttpStatus.OK);    }    @GetMapping("/search/{keyword}")    public ResponseEntity<List<UserDto>> searchUserByKeyword(@PathVariable String keyword) {        log.info("Initiating request for Search User ");        List<UserDto> searchedUsers = this.userService.searchUser(keyword);        log.info("Completed request for Search User " + keyword);        return new ResponseEntity<>(searchedUsers, HttpStatus.OK);    }    @PostMapping("/image/{userId}")    public ResponseEntity<ImageResponse> uploadUserImage(            @RequestParam("userImage") MultipartFile image,            @PathVariable Long userId) throws IOException {        String imageName = fileServiceI.uploadFile(image, imageUploadPath);        UserDto user = userService.getUserById(userId);        user.setImageName(imageName);        UserDto userDto = userService.updateUser(user, userId);        ImageResponse imageResponse = ImageResponse.builder().imageName(imageName).message("Image uploaded")                                         .success(true).status(HttpStatus.CREATED).build();        return new ResponseEntity<>((imageResponse),HttpStatus.CREATED);    }    @GetMapping("/image/{userId}")    public void serveUserImage(@PathVariable Long userId, HttpServletResponse response) throws IOException {        UserDto user = userService.getUserById(userId);        log.info("User service name:{}",user.getImageName());        InputStream resource = fileServiceI.getResource(imageUploadPath, user.getImageName());        response.setContentType(IMAGE_JPEG_VALUE);        StreamUtils.copy((resource),response.getOutputStream());    }}