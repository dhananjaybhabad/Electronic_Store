package com.infosys.electronicstore.services.impl;import com.infosys.electronicstore.dtos.PageableResponse;import com.infosys.electronicstore.dtos.ProductDto;import com.infosys.electronicstore.entities.Product;import com.infosys.electronicstore.exceptions.ResourceNotFoundException;import com.infosys.electronicstore.helper.Helper;import com.infosys.electronicstore.repositories.ProductRepository;import com.infosys.electronicstore.services.ProductServiceI;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;@Servicepublic class ProductServiceImpl implements ProductServiceI {    @Autowired    private ProductRepository productRepository;    @Autowired    private ModelMapper modelMapper;    @Override    public ProductDto create(ProductDto productDto) {        Product product = modelMapper.map(productDto, Product.class);        Product saveProduct = productRepository.save(product);        return modelMapper.map(saveProduct, ProductDto.class);    }    @Override    public ProductDto update(ProductDto productDto, String productId) {        //first of all fetch the records        Product product = productRepository.findById(productId)                .orElseThrow(() -> new ResourceNotFoundException ("Product Not Found With This ID"));        product.setTitle(productDto.getTitle());        product.setDescription(productDto.getDescription());        product.setPrice(productDto.getPrice());        product.setDiscountedPrice(productDto.getDiscountedPrice());        product.setQuantity(productDto.getQuantity());        product.setLive(productDto.isLive());        product.setStock(productDto.isStock());        //save the entities        Product updatedProduct = productRepository.save(product);        return modelMapper.map(updatedProduct,ProductDto.class);    }    @Override    public void delete(String productId) {        Product delproduct = productRepository.findById(productId)                .orElseThrow(() -> new ResourceNotFoundException("Product Not Found With This ID"));        productRepository.delete(delproduct);    }    @Override    public ProductDto get(String productId) {        Product getProduct = productRepository.findById(productId)                .orElseThrow(() -> new ResourceNotFoundException("Product Not Found With This ID"));        return modelMapper.map(getProduct, ProductDto.class);    }    @Override    public PageableResponse<ProductDto> getAll            (int pageNumber,             int pageSize,             String sortBy,             String sortDir) {        Sort sort = (sortDir.equalsIgnoreCase("desc")) ? (Sort.by(sortBy).descending()) : (Sort.by(sortBy).ascending());        Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);        Page<Product> page = productRepository.findAll(pageable);        return Helper.getPageableResponse(page,ProductDto.class);    }    @Override    public PageableResponse<ProductDto> getAllLive(int pageNumber, int pageSize, String sortBy, String sortDir) {        Sort sort = (sortDir.equalsIgnoreCase("desc")) ? (Sort.by(sortBy).descending()) : (Sort.by(sortBy).ascending());        Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);        Page<Product> page = productRepository.findByLiveTrue(pageable);        return Helper.getPageableResponse(page,ProductDto.class);    }    @Override    public PageableResponse<ProductDto> searchByTitle(String subTitle, int pageNumber, int pageSize, String sortBy, String sortDir) {        Sort sort = (sortDir.equalsIgnoreCase("desc")) ? (Sort.by(sortBy).descending()) : (Sort.by(sortBy).ascending());        Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);        Page<Product> page = productRepository.findByTitleContaining(subTitle,pageable);        return Helper.getPageableResponse(page,ProductDto.class);    }}