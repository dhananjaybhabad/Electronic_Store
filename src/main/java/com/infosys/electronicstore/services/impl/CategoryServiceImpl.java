package com.infosys.electronicstore.services.impl;import com.infosys.electronicstore.dtos.CategoryDto;import com.infosys.electronicstore.dtos.PageableResponse;import com.infosys.electronicstore.entities.Category;import com.infosys.electronicstore.exceptions.ResourceNotFoundException;import com.infosys.electronicstore.helper.Helper;import com.infosys.electronicstore.repositories.CategoryRepository;import com.infosys.electronicstore.services.CategoryServiceI;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Slf4j@Servicepublic class CategoryServiceImpl implements CategoryServiceI {        @Autowired        private CategoryRepository categoryRepo;        @Autowired        private ModelMapper modelMapper;        @Override        public CategoryDto createCategory(CategoryDto categoryDto) {            log.info("Initiated Dao Call to save the Category");            Category category = this.modelMapper.map(categoryDto, Category.class);            Category save = this.categoryRepo.save(category);            CategoryDto categoryDto1 = this.modelMapper.map(save, CategoryDto.class);            log.info("Completed Dao call to save the Category");            return categoryDto1;        }        @Override        public CategoryDto updateCategory(CategoryDto categorydto, Long catId) {            log.info("Initiated Dao Call to Update the Category with :{}",catId);            Category category = this.categoryRepo.findById(catId).orElseThrow(() -> new ResourceNotFoundException("Category not found with this id"));            category.setTitle(categorydto.getTitle());            category.setDescription(categorydto.getDescription());            category.setCoverImage(categorydto.getCoverImage());            Category save = this.categoryRepo.save(category);            log.info("Completed Dao Call to Update the Category with :{}",catId);            return this.modelMapper.map(save,CategoryDto.class);        }        @Override        public CategoryDto getSingleCategory(Long catID) {            log.info("Initiated Dao Call to Get the Category with :{}",catID);            Category category = this.categoryRepo.findById(catID).orElseThrow(() -> new ResourceNotFoundException("Category not found with this id"));            log.info("Completed Dao Call to Get the Category with :{}",catID);            return this.modelMapper.map(category,CategoryDto.class);        }        @Override        public PageableResponse<CategoryDto> getAllcategories(Integer pagenumber, Integer pagesize, String sortBy, String sortDir) {            log.info("Initiating dao call to get the All Category data ");            Sort sort = (sortDir.equalsIgnoreCase("asc")) ? Sort.by(sortBy).ascending() : (Sort.by(sortBy).descending());            Pageable page = PageRequest.of(pagenumber, pagesize, sort);            Page<Category> categories = this.categoryRepo.findAll(page);            PageableResponse<CategoryDto> pageableresponse = Helper.getPageableResponse(categories, CategoryDto.class);            log.info("Completed dao call to get the All Categories data ");            return pageableresponse;        }        @Override        public List<CategoryDto> searchCategory(String keyword) {            log.info("Initiated Dao Call to search the Category with :{}",keyword);            List<Category> categoryList = this.categoryRepo.findAByTitleContaining(keyword);            log.info("Completed Dao Call to Search the Category with :{}",keyword);            return categoryList.stream().map((category) -> this.modelMapper.map(category, CategoryDto.class)).collect(Collectors.toList());        }        @Override        public void deleteCategory(Long catid) {            log.info("Initiated Dao Call to Delete the Category with :{}",catid);            Category category = this.categoryRepo.findById(catid).orElseThrow(() -> new ResourceNotFoundException("Category not found with this id"));            log.info("Completed Dao Call to Delete the Category with :{}",catid);            this.categoryRepo.delete(category);        }    }