package com.infosys.electronicstore.services.impl;import com.infosys.electronicstore.constant.AppConstant;import com.infosys.electronicstore.dtos.UserDto;import com.infosys.electronicstore.entities.User;import com.infosys.electronicstore.exceptions.ResourceNotFoundException;import com.infosys.electronicstore.repositories.UserRepository;import com.infosys.electronicstore.services.UserServiceI;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.querydsl.QPageRequest;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Servicepublic class UserServiceImpl implements UserServiceI {    @Autowired    private UserRepository userRepository;    @Autowired    private ModelMapper modelMapper;    @Override    public UserDto createUser(UserDto userDto) {        User user = dtoToEntity(userDto);        User savedUser = userRepository.save(user);        UserDto newDto = entityToDto(savedUser);        return newDto;    }    @Override    public UserDto updateUser(UserDto userDto, Long userId) {        User user = this.userRepository.findById(userId).orElseThrow(() ->                new ResourceNotFoundException(AppConstant.INVALID_USERID));        user.setName(userDto.getName());        user.setEmail(userDto.getEmail());        user.setPassword(user.getPassword());        user.setGender(userDto.getGender());        user.setAbout(userDto.getAbout());        user.setImageName(userDto.getImageName());        User updatedUser = this.userRepository.save(user);        UserDto userDto1 = entityToDto(updatedUser);        return userDto1;    }    @Override    public void deleteUser(Long userId) {        User deleteUser = this.userRepository.findById(userId).orElseThrow(() ->                new ResourceNotFoundException(AppConstant.INVALID_USERID));       // this.userRepository.delete(deleteUser);        deleteUser.setIsActive(AppConstant.NO);        this.userRepository.save(deleteUser);    }    @Override    public UserDto getUserById(Long userId) {        User getUser = this.userRepository.findById(userId).orElseThrow(() ->                new ResourceNotFoundException(AppConstant.INVALID_USERID));        UserDto getUserDto = entityToDto(getUser);        return getUserDto;    }    @Override    public List<UserDto> getAllUsers(int PageNumber , int PageSize ) {        Pageable pageable = PageRequest.of(PageNumber, PageSize);        Page<User> page = this.userRepository.findAll(pageable);        List<User> users = page.getContent();        List<UserDto> userDtos = users.stream().map((user ->                this.modelMapper.map(user, UserDto.class))).collect(Collectors.toList());        return userDtos;    }    @Override    public UserDto getUserByEmail(String email) {        User userEmail = this.userRepository.findByEmail(email).orElseThrow(() ->                new ResourceNotFoundException(AppConstant.INVALID_EMAIL));        return entityToDto(userEmail);    }    @Override    public List<UserDto> searchUser(String keyword) {        List<User> users = this.userRepository.findByNameContaining(keyword);        List<UserDto> userDtoList = users.stream().map((user ->                this.modelMapper.map(user, UserDto.class))).collect(Collectors.toList());        return userDtoList;    }    private UserDto entityToDto(User savedUser) {        return modelMapper.map(savedUser, UserDto.class);    }    private User dtoToEntity(UserDto userDto) {        return modelMapper.map(userDto, User.class);    }}